// <auto-generated />
using System;
using BuckScience.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace BuckScience.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250911202337_ConvertToSqlite")]
    partial class ConvertToSqlite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("BuckScience.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AzureEntraB2CId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TrialStartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AzureEntraB2CId")
                        .IsUnique();

                    b.ToTable("ApplicationUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AzureEntraB2CId = "b300176c-0f43-4a4d-afd3-d128f8e635a1",
                            CreatedDate = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Darrin B",
                            Email = "darrin@buckscience.com",
                            FirstName = "Darrin",
                            LastName = "Brandon"
                        });
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.CameraPlacementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CameraId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("DirectionDegrees")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("CameraId", "EndDateTime")
                        .HasDatabaseName("IX_CameraPlacementHistory_CameraId_EndDateTime");

                    b.ToTable("CameraPlacementHistories");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.FeatureWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassificationType")
                        .HasColumnType("INTEGER");

                    b.Property<float>("DefaultWeight")
                        .HasColumnType("real");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SeasonalWeightsJson")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<float?>("UserWeight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationType");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyId", "ClassificationType")
                        .IsUnique()
                        .HasDatabaseName("IX_FeatureWeights_Property_Classification");

                    b.ToTable("FeatureWeights");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CameraId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CameraPlacementHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUploaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeatherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("CameraPlacementHistoryId");

                    b.HasIndex("DateTaken");

                    b.HasIndex("WeatherId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.PhotoTag", b =>
                {
                    b.Property<int>("PhotoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PhotoId", "TagId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("TagId");

                    b.ToTable("PhotoTags");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverPhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfileStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TagId");

                    b.HasIndex("PropertyId", "TagId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<MultiPolygon>("Boundary")
                        .HasColumnType("geometry");

                    b.Property<Point>("Center")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DayHour")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("NightHour")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId", "Name");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.PropertyFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassificationType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationType");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyFeatures");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.PropertySeasonMonthsOverride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("MonthsJson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Season")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId", "Season")
                        .IsUnique()
                        .HasDatabaseName("IX_PropertySeasonMonthsOverride_Property_Season");

                    b.ToTable("PropertySeasonMonthsOverrides");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.PropertyTag", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFastTag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.HasKey("PropertyId", "TagId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TagId");

                    b.ToTable("PropertyTags");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CurrentPeriodEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CurrentPeriodStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Tier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StripeCustomerId");

                    b.HasIndex("StripeSubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPeriodEnd = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentPeriodStart = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "active",
                            Tier = 0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("isDefaultTag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDefaultTag");

                    b.HasKey("Id");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CloudCover")
                        .HasColumnType("REAL");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DateTimeEpoch")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hour")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<double>("MoonPhase")
                        .HasColumnType("REAL");

                    b.Property<string>("MoonPhaseText")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<double>("Pressure")
                        .HasColumnType("REAL");

                    b.Property<string>("PressureTrend")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<int>("SunriseEpoch")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SunsetEpoch")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<double>("Visibility")
                        .HasColumnType("REAL");

                    b.Property<double>("WindDirection")
                        .HasColumnType("REAL");

                    b.Property<string>("WindDirectionText")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DateTime");

                    b.HasIndex("DateTimeEpoch");

                    b.HasIndex("Latitude", "Longitude", "Date")
                        .HasDatabaseName("IX_Weather_Location_Date");

                    b.HasIndex("Latitude", "Longitude", "Date", "Hour")
                        .HasDatabaseName("IX_Weather_Location_Date_Hour");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Camera", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.Property", "Property")
                        .WithMany("Cameras")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.CameraPlacementHistory", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.Camera", "Camera")
                        .WithMany("PlacementHistories")
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camera");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.FeatureWeight", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.Property", "Property")
                        .WithMany("FeatureWeights")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Photo", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.Camera", "Camera")
                        .WithMany("Photos")
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BuckScience.Domain.Entities.CameraPlacementHistory", "PlacementHistory")
                        .WithMany()
                        .HasForeignKey("CameraPlacementHistoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BuckScience.Domain.Entities.Weather", "Weather")
                        .WithMany()
                        .HasForeignKey("WeatherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Camera");

                    b.Navigation("PlacementHistory");

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.PhotoTag", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.Photo", "Photo")
                        .WithMany("PhotoTags")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuckScience.Domain.Entities.Tag", "Tag")
                        .WithMany("PhotoTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Profile", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuckScience.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.PropertyFeature", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.Property", "Property")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.PropertySeasonMonthsOverride", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.PropertyTag", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuckScience.Domain.Entities.Tag", "Tag")
                        .WithMany("PropertyTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("BuckScience.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Camera", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("PlacementHistories");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Photo", b =>
                {
                    b.Navigation("PhotoTags");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Property", b =>
                {
                    b.Navigation("Cameras");

                    b.Navigation("FeatureWeights");

                    b.Navigation("PropertyFeatures");
                });

            modelBuilder.Entity("BuckScience.Domain.Entities.Tag", b =>
                {
                    b.Navigation("PhotoTags");

                    b.Navigation("PropertyTags");
                });
#pragma warning restore 612, 618
        }
    }
}
