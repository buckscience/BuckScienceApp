@model BuckScience.Web.ViewModels.Photos.PhotoUploadVm
@{
    ViewData["Title"] = "Upload Photos";
}
<h1>Upload Photo</h1>

<form id="uploadForm" action="@Url.Content($"~/cameras/{Model.CameraId}/photos/upload")"
      method="post" enctype="multipart/form-data" novalidate>
    @Html.AntiForgeryToken()

    <input type="hidden" asp-for="PropertyId" />
    <input type="hidden" asp-for="CameraId" />

    <div id="errorContainer" class="alert alert-danger d-none" role="alert">
        <div id="errorMessage"></div>
    </div>
    
    <div class="alert alert-success mb-4" role="alert" style="background-color: #f0f8f0; border-color: #527A52; color: #2d3748;">
        <div class="d-flex align-items-start">
            @if (Context.Request.Query["fromSetup"] == "1")
            {
                <div class="me-3">
                    <span class="badge badge-custom-primary">Step 3</span>
                </div>
            }
            
            <div class="flex-grow-1">
                <h5 class="mb-2" style="color: #527A52;">Upload photos</h5>
                <p class="mb-2">Upload a few photos from this camera to finish setup.</p>
                <ol class="mb-0">
                    <li>Choose one or more image files (JPEG/PNG). Larger images may take longer to process.</li>
                    <li>Upload to complete your setup. You can add more cameras or photos anytime.</li>
                </ol>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <label asp-for="Files" class="form-label"></label>
        <input asp-for="Files" type="file" class="form-control" multiple accept="image/jpeg,image/png,image/jpg" />
        <span asp-validation-for="Files" class="text-danger"></span>
        <div class="form-text">You can select multiple image files (JPEG/PNG). Hold Ctrl/Cmd while clicking to select multiple files.</div>
    </div>

    <div class="mt-4 d-flex gap-2">
        <button type="submit" id="uploadBtn" class="btn btn-primary">
            <span class="spinner-border spinner-border-sm d-none me-2" id="uploadSpinner" role="status" aria-hidden="true"></span>
            <span id="uploadText">Upload</span>
        </button>
        <a href="/cameras/@Model.CameraId/photos"
           class="btn btn-outline-secondary">Back to camera</a>
    </div>
</form>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">
                    <i class="fas fa-check-circle me-2"></i>Upload Successful!
                </h5>
            </div>
            <div class="modal-body text-center">
                <div class="mb-3">
                    <i class="fas fa-images fa-3x text-success mb-3"></i>
                    <h4 id="uploadMessage">Photos uploaded successfully!</h4>
                    <p class="text-muted">What would you like to do next?</p>
                </div>
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-primary" id="viewPhotosBtn">
                    <i class="fas fa-eye me-2"></i>View Photos
                </button>
                <button type="button" class="btn btn-outline-secondary" id="uploadMoreBtn">
                    <i class="fas fa-plus me-2"></i>Upload More
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <style>
        /* Ensure modal appears above all other elements including sidebar */
        #successModal {
            z-index: 1070 !important;
        }
        #successModal .modal-backdrop {
            z-index: 1060 !important;
        }
        /* Bootstrap modal backdrop fix */
        .modal-backdrop {
            z-index: 1060 !important;
        }
    </style>
    <script>
        document.getElementById('uploadForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const form = this;
            const formData = new FormData(form);
            const uploadBtn = document.getElementById('uploadBtn');
            const uploadSpinner = document.getElementById('uploadSpinner');
            const uploadText = document.getElementById('uploadText');
            const errorContainer = document.getElementById('errorContainer');
            
            // Show loading state
            uploadBtn.disabled = true;
            uploadSpinner.classList.remove('d-none');
            uploadText.textContent = 'Uploading...';
            errorContainer.classList.add('d-none');
            
            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success modal
                    const message = data.photoCount === 1 
                        ? `${data.photoCount} photo uploaded successfully!`
                        : `${data.photoCount} photos uploaded successfully!`;
                    document.getElementById('uploadMessage').textContent = message;
                    
                    // Set up modal buttons
                    document.getElementById('viewPhotosBtn').onclick = function() {
                        window.location.href = `/cameras/${data.cameraId}/photos`;
                    };
                    
                    document.getElementById('uploadMoreBtn').onclick = function() {
                        // Reset form and hide modal
                        form.reset();
                        const modalElement = document.getElementById('successModal');
                        const modal = bootstrap.Modal.getInstance(modalElement);
                        modal.hide();
                        resetUploadButton();
                    };
                    
                    // Move modal to body to ensure it appears above sidebar
                    const modalElement = document.getElementById('successModal');
                    document.body.appendChild(modalElement);
                    
                    // Show modal
                    const modal = new bootstrap.Modal(modalElement);
                    modal.show();
                } else {
                    // Show error
                    document.getElementById('errorMessage').textContent = data.error || 'Upload failed. Please try again.';
                    errorContainer.classList.remove('d-none');
                    resetUploadButton();
                }
            })
            .catch(error => {
                console.error('Upload error:', error);
                document.getElementById('errorMessage').textContent = 'Upload failed. Please try again.';
                errorContainer.classList.remove('d-none');
                resetUploadButton();
            });
        });
        
        function resetUploadButton() {
            const uploadBtn = document.getElementById('uploadBtn');
            const uploadSpinner = document.getElementById('uploadSpinner');
            const uploadText = document.getElementById('uploadText');
            
            uploadBtn.disabled = false;
            if (uploadSpinner) {
                uploadSpinner.classList.add('d-none');
            }
            if (uploadText) {
                uploadText.textContent = 'Upload';
            }
        }
    </script>
}