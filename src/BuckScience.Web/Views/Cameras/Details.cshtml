@model BuckScience.Web.ViewModels.Cameras.CameraDetailsVm
@{
    ViewData["Title"] = $"{Model.Name} - Camera Details";
    
    string GetDirectionName(float degrees)
    {
        var directions = new[] { "N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW" };
        var index = (int)Math.Round(degrees / 22.5) % 16;
        return directions[index];
    }
    
    string GetDurationString(TimeSpan duration)
    {
        if (duration.TotalDays >= 1)
            return $"{(int)duration.TotalDays} day{((int)duration.TotalDays == 1 ? "" : "s")}, {duration.Hours}h";
        else if (duration.TotalHours >= 1)
            return $"{(int)duration.TotalHours}h {duration.Minutes}m";
        else
            return $"{(int)duration.TotalMinutes} minute{((int)duration.TotalMinutes == 1 ? "" : "s")}";
    }
}

<div class="camera-details">
    <!-- Header with Back Button -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="sidebar-title">@Model.Name</h2>
        <a href="/properties/@Model.PropertyId/details" class="btn btn-custom-cancel btn-sm">
            <i class="fas fa-arrow-left"></i> Back to Property
        </a>
    </div>
    <hr class="sidebar-title-separator mb-4" />

    <!-- Camera Summary Card -->
    <div class="card mb-4 border-0 shadow-sm">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="d-flex align-items-center">
                    <i class="fas fa-camera fa-lg text-custom-primary me-2"></i>
                    <h5 class="mb-0">Camera Information</h5>
                </div>
                <span class="badge @(Model.IsActive ? "badge-custom-success" : "badge-custom-secondary")">
                    @(Model.IsActive ? "Active" : "Inactive")
                </span>
            </div>

            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <label class="text-muted small d-block">Location</label>
                    <p class="mb-0 small">
                        <i class="fas fa-map-marker-alt text-custom-primary me-1"></i>
                        @Model.Latitude.ToString("F4"), @Model.Longitude.ToString("F4")
                    </p>
                </div>
                <div class="col-md-6">
                    <label class="text-muted small d-block">Direction</label>
                    <p class="mb-0 small">
                        <i class="fas fa-compass text-custom-primary me-1"></i>
                        @Model.DirectionDegrees.ToString("F0")Â° (@GetDirectionName(Model.DirectionDegrees))
                    </p>
                </div>
            </div>
            
            <div class="row g-3 mb-3">
                <div class="col-md-6">
                    <label class="text-muted small d-block">Brand/Model</label>
                    <p class="mb-0 small">@Model.Brand/@(string.IsNullOrEmpty(Model.Model) ? "-" : Model.Model)</p>
                </div>
                <div class="col-md-6">
                    <label class="text-muted small d-block">Time at Current Location</label>
                    <p class="mb-0 small">
                        <i class="fas fa-clock text-custom-primary me-1"></i>
                        @if (Model.TimeAtCurrentLocation.HasValue)
                        {
                            @GetDurationString(Model.TimeAtCurrentLocation.Value)
                        }
                        else
                        {
                            <span class="text-muted">Unknown</span>
                        }
                    </p>
                </div>
            </div>

            <div class="d-flex gap-2 mt-2">
                <button type="button" class="btn btn-sm btn-outline-primary flex-fill" onclick="handleEditCamera(@Model.PropertyId, @Model.Id)">
                    <i class="fas fa-edit me-1"></i> Edit Camera
                </button>
                <a href="/cameras/@Model.Id/upload" class="btn btn-sm btn-custom-primary flex-fill">
                    <i class="fas fa-upload me-1"></i> Upload Photos
                </a>
            </div>


        </div>
    </div>

    <!-- Photos Section -->
    <div class="card mb-4 border-0 shadow-sm">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex align-items-center">
                    <i class="fas fa-images fa-lg text-custom-primary me-2"></i>
                    <h5 class="mb-0">Photos</h5>
                </div>
                <span class="badge badge-custom-primary">@Model.PhotoCount</span>
            </div>

            @if (Model.PhotoCount == 0)
            {
                <div class="text-center py-3">
                    <p class="text-muted">No photos uploaded to this camera yet.</p>
                    <a href="/cameras/@Model.Id/upload" class="btn btn-custom-primary btn-sm">Upload First Photos</a>
                </div>
            }
            else
            {
                <div class="d-grid">
                    <a href="/properties/@Model.PropertyId/photos?cameras=@Model.Id" class="btn btn-outline-primary">
                        <i class="fas fa-images me-2"></i>View All Photos from @Model.Name
                    </a>
                </div>
            }
        </div>
    </div>

    <!-- Advanced Options -->
    <div class="d-flex justify-content-end">
        <a href="/properties/@Model.PropertyId/cameras/@Model.Id/delete" class="btn btn-outline-danger btn-sm">
            <i class="fas fa-trash me-1"></i> Delete Camera
        </a>
    </div>
</div>

@section Scripts {
    <script>
        // Ensure panToCameraLocation function is available
        window.panToCameraLocation = function(lng, lat) {
            if (window.App && window.App.panToCameraLocation) {
                window.App.panToCameraLocation(lng, lat);
            } else {
                console.log('Pan to camera location:', lng, lat);
            }
        };

        // Robust editCamera function that will always be available
        window.handleEditCamera = function(propertyId, cameraId) {
            console.log('Edit camera clicked:', propertyId, cameraId);
            
            // Try to use the global editCamera function first
            if (typeof window.editCamera === 'function') {
                window.editCamera(propertyId, cameraId);
                return;
            }
            
            // Fallback: use App.editCamera if available
            if (window.App && typeof window.App.editCamera === 'function') {
                window.App.editCamera(propertyId, cameraId);
                return;
            }
            
            // Final fallback: use sidebar loading directly
            if (window.App && typeof window.App.loadSidebar === 'function') {
                window.App.loadSidebar(`/properties/${propertyId}/cameras/${cameraId}/edit`, { push: true });
                return;
            }
            
            // Ultimate fallback: regular navigation
            console.warn('No sidebar loading available, using regular navigation');
            window.location.href = `/properties/${propertyId}/cameras/${cameraId}/edit`;
        };

        // Initialize camera details when page loads (for sidebar loads)
        document.addEventListener('DOMContentLoaded', function() {
            // If this is loaded via sidebar, pan to camera location automatically
            const cameraLat = @Model.Latitude;
            const cameraLng = @Model.Longitude;
            
            // Small delay to ensure everything is initialized
            setTimeout(() => {
                if (window.App && window.App.panToCameraLocation) {
                    window.App.panToCameraLocation(cameraLng, cameraLat);
                }
            }, 100);
        });

        // Also handle sidebar load events
        document.addEventListener('sidebar:loaded', function(event) {
            // If this is a camera details page loaded in sidebar, pan to camera
            if (event.detail && event.detail.url && event.detail.url.includes('/cameras/') && event.detail.url.includes('/details')) {
                const cameraLat = @Model.Latitude;
                const cameraLng = @Model.Longitude;
                
                setTimeout(() => {
                    if (window.App && window.App.panToCameraLocation) {
                        window.App.panToCameraLocation(cameraLng, cameraLat);
                    }
                }, 300);
            }
        });
    </script>
}