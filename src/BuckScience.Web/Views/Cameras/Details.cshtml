@model BuckScience.Web.ViewModels.Cameras.CameraDetailsVm
@{
    ViewData["Title"] = $"{Model.Name} - Camera Details";
    
    string GetDirectionName(float degrees)
    {
        var directions = new[] { "N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW" };
        var index = (int)Math.Round(degrees / 22.5) % 16;
        return directions[index];
    }
    
    string GetDurationString(TimeSpan duration)
    {
        int days = (int)duration.TotalDays;
        return $"{days} day{(days == 1 ? "" : "s")}";
    }

}

<div class="camera-details">
    <!-- Header with Back Button -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <a href="/properties/@Model.PropertyId/details" class="btn btn-custom-cancel btn-sm">
            <i class="fas fa-arrow-left"></i> Back to Property
        </a>
    </div>

    <!-- Camera Summary Card -->
    <div class="card mb-4 border-0 shadow-sm">
        <div class="card-body">

            <!-- Camera Name & Status -->
            <div class="d-flex justify-content-between align-items-center mb-1">
                <h2 class="card-title mb-0">@Model.Name</h2>
                <span class="badge @(Model.IsActive ? "badge-custom-success" : "badge-custom-secondary")">
                    @(Model.IsActive ? "Active" : "Inactive")
                </span>
            </div>

            <!-- Brand / Model -->
            <small class="text-muted d-block mb-3">
                @Model.Brand / @(string.IsNullOrEmpty(Model.Model) ? "-" : Model.Model)
            </small>

            <!-- Info Section (stacked mini-containers) -->
            <div class="d-flex flex-column gap-2">

                <!-- Coordinates -->
                <div class="bg-light rounded p-2 d-flex align-items-start">
                    <i class="fas fa-map-marker-alt text-custom-primary me-2 mt-1"></i>
                    <div class="small text-muted">
                        <strong>Coordinates:</strong> @Model.Latitude.ToString("F4"), @Model.Longitude.ToString("F4")
                    </div>
                </div>

                <!-- Time at Current Location -->
                <div class="bg-light rounded p-2 d-flex align-items-start">
                    <i class="fas fa-clock text-custom-primary me-2 mt-1"></i>
                    <div class="small text-muted">
                        <strong>Current Location:</strong>
                        @if (Model.TimeAtCurrentLocation.HasValue)
                        {
                            @GetDurationString(Model.TimeAtCurrentLocation.Value)
                        }
                        else
                        {
                            <span class="text-muted">Unknown</span>
                        }
                    </div>
                </div>

                <!-- Direction -->
                <div class="bg-light rounded p-2 d-flex align-items-start">
                    <i class="fas fa-compass text-custom-primary me-2 mt-1"></i>
                    <div class="small text-muted">
                        <strong>Camera Direction:</strong> Facing @GetDirectionName(Model.DirectionDegrees)
                        <span class="text-muted small">
                            (@Model.DirectionDegrees.ToString("F0")Â°)
                        </span>
                    </div>
                </div>

            </div>

            <div class="d-flex gap-2 mt-2">
                <button type="button" class="btn btn-sm btn-outline-primary flex-fill" onclick="handleEditCamera(@Model.PropertyId, @Model.Id)">
                    <i class="fas fa-edit me-1"></i> Edit Camera
                </button>
                <button type="button" class="btn btn-sm btn-custom-primary flex-fill" onclick="handleUploadPhotos(@Model.Id)">
                    <i class="fas fa-upload me-1"></i> Upload Photos
                </button>
            </div>


        </div>
    </div>

    <!-- Photos Section -->
    <div class="card mb-4 border-0 shadow-sm">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex align-items-center">
                    <i class="fas fa-images fa-lg text-custom-primary me-2"></i>
                    <h5 class="mb-0">Photos</h5>
                </div>
                <span class="badge badge-custom-primary">@Model.PhotoCount</span>
            </div>

            @if (Model.PhotoCount == 0)
            {
                <div class="text-center py-3">
                    <p class="text-muted">No photos uploaded to this camera yet.</p>
                    <button type="button" class="btn btn-custom-primary btn-sm" onclick="handleUploadPhotos(@Model.Id)">Upload First Photos</button>
                </div>
            }
            else
            {
                <div class="d-grid">
                    <a href="/properties/@Model.PropertyId/photos?cameras=@Model.Id" class="btn btn-outline-primary">
                        <i class="fas fa-images me-2"></i>View All Photos from @Model.Name
                    </a>
                </div>
            }
        </div>
    </div>


@section Scripts {
    <script>
        // Initialize camera details when page loads (for sidebar loads)
        document.addEventListener('DOMContentLoaded', function() {
            // If this is loaded via sidebar, pan to camera location automatically
            const cameraLat = @Model.Latitude;
            const cameraLng = @Model.Longitude;
            
            // Small delay to ensure everything is initialized
            setTimeout(() => {
                if (window.panToCameraLocation) {
                    window.panToCameraLocation(cameraLng, cameraLat);
                }
            }, 100);
        });

        // Also handle sidebar load events
        document.addEventListener('sidebar:loaded', function(event) {
            // If this is a camera details page loaded in sidebar, pan to camera
            if (event.detail && event.detail.url && event.detail.url.includes('/cameras/') && event.detail.url.includes('/details')) {
                const cameraLat = @Model.Latitude;
                const cameraLng = @Model.Longitude;
                
                setTimeout(() => {
                    if (window.panToCameraLocation) {
                        window.panToCameraLocation(cameraLng, cameraLat);
                    }
                }, 300);
            }
        });
    </script>
}