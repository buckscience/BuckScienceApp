@model BuckScience.Web.ViewModels.BuckTrax.BuckTraxIndexVm
@{
    ViewData["Title"] = "BuckTrax - Movement Prediction";
}

<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Control Panel -->
        <div class="col-md-4 p-4">
            <div class="d-flex align-items-center mb-4">
                <i class="fas fa-route text-primary me-3" style="font-size: 1.5rem;"></i>
                <h2 class="mb-0">BuckTrax</h2>
            </div>
            <p class="text-muted mb-4">Predict deer movement patterns based on sighting history and property features.</p>

            <!-- Property Selection -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-map-marked-alt me-2"></i>
                        Select Property
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.Properties.Any())
                    {
                        <select id="property-selector" class="form-select">
                            <option value="">Choose a property...</option>
                            @foreach (var property in Model.Properties)
                            {
                                <option value="@property.Id">@property.Name</option>
                            }
                        </select>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            No properties found. <a href="/properties">Create a property</a> to get started.
                        </div>
                    }
                </div>
            </div>

            <!-- Profile Selection -->
            <div class="card mb-4" id="profile-card" style="display: none;">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-deer me-2"></i>
                        Select Profile
                    </h5>
                </div>
                <div class="card-body">
                    <div id="profile-selector">
                        <!-- Profiles will be loaded dynamically -->
                    </div>
                </div>
            </div>

            <!-- Prediction Controls -->
            <div class="card mb-4" id="prediction-card" style="display: none;">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-line me-2"></i>
                        Movement Prediction
                    </h5>
                </div>
                <div class="card-body">
                    <button id="run-prediction" class="btn btn-primary w-100" disabled>
                        <i class="fas fa-play me-2"></i>
                        Run BuckTrax Prediction
                    </button>
                    <div id="prediction-loading" class="text-center mt-3" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 text-muted">Analyzing movement patterns...</p>
                    </div>
                </div>
            </div>

            <!-- Results Summary -->
            <div class="card" id="results-card" style="display: none;">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-target me-2"></i>
                        Prediction Results
                    </h5>
                </div>
                <div class="card-body">
                    <div id="results-summary">
                        <!-- Results will be loaded dynamically -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Results and Map Area -->
        <div class="col-md-8 p-0">
            <div class="h-100 d-flex flex-column">
                <!-- Time Segment Tabs -->
                <div id="time-segments" class="bg-light border-bottom p-3" style="display: none;">
                    <ul class="nav nav-pills" id="time-segment-tabs" role="tablist">
                        <!-- Time segments will be loaded dynamically -->
                    </ul>
                </div>

                <!-- Predictions Display -->
                <div class="flex-grow-1 d-flex" id="predictions-display">
                    <div class="col-6 p-4" id="predictions-content">
                        <div class="d-flex align-items-center justify-content-center h-100 text-muted">
                            <div class="text-center">
                                <i class="fas fa-route fa-4x mb-3"></i>
                                <h4>Welcome to BuckTrax</h4>
                                <p>Select a property and profile to start predicting movement patterns.</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-6 p-0" id="prediction-map-container">
                        <div id="prediction-map" style="height: 100%; width: 100%;"></div>
                    </div>
                </div>

                <!-- Prediction Details -->
                <div class="tab-content" id="prediction-tabs-content">
                    <!-- Tab content will be loaded dynamically -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let selectedPropertyId = null;
        let selectedProfileId = null;
        let currentPredictions = null;
        let predictionMap = null;

        $(document).ready(function() {
            initializeBuckTrax();
            initializePredictionMap();
        });

        function initializePredictionMap() {
            // Initialize map for predictions
            const mapboxToken = $('meta[name="mapbox-token"]').attr('content');
            if (!mapboxToken) {
                console.warn('Mapbox token not found - map will not be initialized');
                return;
            }

            mapboxgl.accessToken = mapboxToken;
            predictionMap = new mapboxgl.Map({
                container: 'prediction-map',
                style: 'mapbox://styles/mapbox/outdoors-v12',
                center: [-95, 40], // Center of US
                zoom: 4
            });

            predictionMap.addControl(new mapboxgl.NavigationControl());
        }

        function initializeBuckTrax() {
            // Property selection handler
            $('#property-selector').on('change', function() {
                selectedPropertyId = $(this).val();
                if (selectedPropertyId) {
                    loadPropertyProfiles(selectedPropertyId);
                } else {
                    hideProfileCard();
                }
            });

            // Prediction button handler
            $('#run-prediction').on('click', function() {
                if (selectedProfileId) {
                    runMovementPrediction(selectedProfileId);
                }
            });
        }

        function loadPropertyProfiles(propertyId) {
            $.get(`/bucktrax/api/properties/${propertyId}/profiles`)
                .done(function(profiles) {
                    displayProfiles(profiles);
                    showProfileCard();
                })
                .fail(function() {
                    window.App?.showModal?.("Error", "Failed to load profiles for this property.", "error");
                });
        }

        function displayProfiles(profiles) {
            const container = $('#profile-selector');
            container.empty();

            if (profiles.length === 0) {
                container.html(`
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        No profiles found for this property. <a href="/properties/${selectedPropertyId}">Create a profile</a> to get started.
                    </div>
                `);
                return;
            }

            profiles.forEach(profile => {
                const statusBadge = getProfileStatusBadge(profile.profileStatus);
                const photoHtml = profile.coverPhotoUrl 
                    ? `<img src="${profile.coverPhotoUrl}" class="rounded me-3" style="width: 50px; height: 50px; object-fit: cover;">`
                    : `<div class="bg-secondary rounded me-3 d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;"><i class="fas fa-deer text-white"></i></div>`;

                const profileCard = $(`
                    <div class="profile-item border rounded p-3 mb-2 cursor-pointer" data-profile-id="${profile.id}" style="cursor: pointer;">
                        <div class="d-flex align-items-center">
                            ${photoHtml}
                            <div class="flex-grow-1">
                                <h6 class="mb-1">${profile.name}</h6>
                                <div class="d-flex align-items-center">
                                    ${statusBadge}
                                    <small class="text-muted ms-2">Tag: ${profile.tagName}</small>
                                </div>
                            </div>
                            <i class="fas fa-chevron-right text-muted"></i>
                        </div>
                    </div>
                `);

                profileCard.on('click', function() {
                    selectProfile(profile.id, profile.name);
                });

                container.append(profileCard);
            });
        }

        function getProfileStatusBadge(status) {
            switch(status) {
                case 1: return '<span class="badge bg-success">Watching</span>';
                case 2: return '<span class="badge bg-warning">Hit List</span>';
                case 3: return '<span class="badge bg-dark">Harvested</span>';
                default: return '<span class="badge bg-secondary">Unknown</span>';
            }
        }

        function selectProfile(profileId, profileName) {
            selectedProfileId = profileId;
            
            // Update UI to show selection
            $('.profile-item').removeClass('border-primary bg-light');
            $(`.profile-item[data-profile-id="${profileId}"]`).addClass('border-primary bg-light');
            
            // Enable prediction button
            $('#run-prediction').prop('disabled', false);
            showPredictionCard();
        }

        function runMovementPrediction(profileId) {
            const button = $('#run-prediction');
            const loading = $('#prediction-loading');
            
            button.prop('disabled', true);
            loading.show();

            $.ajax({
                url: '/bucktrax/api/predict',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ 
                    profileId: profileId,
                    season: null, // Could be enhanced to get current season
                    timeOfDayFilter: null
                }),
                success: function(predictions) {
                    currentPredictions = predictions;
                    displayPredictionResults(predictions);
                    loading.hide();
                    button.prop('disabled', false);
                },
                error: function(xhr) {
                    loading.hide();
                    button.prop('disabled', false);
                    window.App?.showModal?.("Error", "Failed to generate movement predictions: " + (xhr.responseText || "Unknown error"), "error");
                }
            });
        }

        function displayPredictionResults(predictions) {
            // Show results summary
            displayResultsSummary(predictions);
            showResultsCard();

            // Create time segment tabs
            createTimeSegmentTabs(predictions.timeSegments);
            showTimeSegments();

            // Update main display
            updatePredictionsDisplay(predictions);

            // Update map with predictions
            updatePredictionMap(predictions);
        }

        function updatePredictionMap(predictions) {
            if (!predictionMap) return;

            // Clear existing layers
            clearMapLayers();

            // Get all zones from all time segments
            const allZones = [];
            predictions.timeSegments.forEach(segment => {
                segment.predictedZones.forEach(zone => {
                    allZones.push({
                        ...zone,
                        timeSegment: segment.timeSegment
                    });
                });
            });

            if (allZones.length === 0 && predictions.movementCorridors.length === 0) return;

            // Create bounds to fit all zones and corridors
            const bounds = new mapboxgl.LngLatBounds();
            
            // Extend bounds for zones
            allZones.forEach(zone => {
                bounds.extend([zone.longitude, zone.latitude]);
            });

            // Extend bounds for corridors
            predictions.movementCorridors.forEach(corridor => {
                bounds.extend([corridor.startLongitude, corridor.startLatitude]);
                bounds.extend([corridor.endLongitude, corridor.endLatitude]);
            });

            // Add zone features
            if (allZones.length > 0) {
                const zoneFeatures = allZones.map(zone => ({
                    type: 'Feature',
                    properties: {
                        locationName: zone.locationName,
                        probability: zone.probability,
                        sightingCount: zone.sightingCount,
                        timeSegment: zone.timeSegment,
                        isCorridorPrediction: zone.isCorridorPrediction,
                        featureWeight: zone.featureWeight,
                        featureType: zone.featureType
                    },
                    geometry: {
                        type: 'Point',
                        coordinates: [zone.longitude, zone.latitude]
                    }
                }));

                // Add zones source
                predictionMap.addSource('prediction-zones', {
                    type: 'geojson',
                    data: {
                        type: 'FeatureCollection',
                        features: zoneFeatures
                    }
                });

                // Add circles for prediction zones
                predictionMap.addLayer({
                    id: 'prediction-zones-circles',
                    type: 'circle',
                    source: 'prediction-zones',
                    paint: {
                        'circle-radius': [
                            'interpolate',
                            ['linear'],
                            ['get', 'probability'],
                            0, 8,
                            1, 25
                        ],
                        'circle-color': [
                            'case',
                            ['get', 'isCorridorPrediction'],
                            '#ffa500', // Orange for corridors
                            '#ff4444'  // Red for sighting-based predictions
                        ],
                        'circle-opacity': 0.7,
                        'circle-stroke-width': 2,
                        'circle-stroke-color': '#ffffff'
                    }
                });

                // Add labels for zones
                predictionMap.addLayer({
                    id: 'prediction-zones-labels',
                    type: 'symbol',
                    source: 'prediction-zones',
                    layout: {
                        'text-field': '{locationName}',
                        'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],
                        'text-size': 11,
                        'text-anchor': 'top',
                        'text-offset': [0, 1.5]
                    },
                    paint: {
                        'text-color': '#333333',
                        'text-halo-color': '#ffffff',
                        'text-halo-width': 2
                    }
                });
            }

            // Add corridor lines
            if (predictions.movementCorridors.length > 0) {
                const corridorFeatures = predictions.movementCorridors.map(corridor => ({
                    type: 'Feature',
                    properties: {
                        name: corridor.name,
                        transitionCount: corridor.transitionCount,
                        corridorScore: corridor.corridorScore,
                        startFeatureName: corridor.startFeatureName,
                        endFeatureName: corridor.endFeatureName,
                        timeOfDayPattern: corridor.timeOfDayPattern,
                        distance: corridor.distance
                    },
                    geometry: {
                        type: 'LineString',
                        coordinates: [
                            [corridor.startLongitude, corridor.startLatitude],
                            [corridor.endLongitude, corridor.endLatitude]
                        ]
                    }
                }));

                // Add corridors source
                predictionMap.addSource('movement-corridors', {
                    type: 'geojson',
                    data: {
                        type: 'FeatureCollection',
                        features: corridorFeatures
                    }
                });

                // Add corridor lines
                predictionMap.addLayer({
                    id: 'movement-corridors-lines',
                    type: 'line',
                    source: 'movement-corridors',
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    paint: {
                        'line-color': '#00aa00',
                        'line-width': [
                            'interpolate',
                            ['linear'],
                            ['get', 'corridorScore'],
                            0, 2,
                            10, 6
                        ],
                        'line-opacity': 0.8
                    }
                });

                // Add corridor endpoints
                const endpointFeatures = [];
                predictions.movementCorridors.forEach(corridor => {
                    endpointFeatures.push(
                        {
                            type: 'Feature',
                            properties: {
                                name: corridor.startFeatureName,
                                type: 'start',
                                corridorName: corridor.name
                            },
                            geometry: {
                                type: 'Point',
                                coordinates: [corridor.startLongitude, corridor.startLatitude]
                            }
                        },
                        {
                            type: 'Feature',
                            properties: {
                                name: corridor.endFeatureName,
                                type: 'end',
                                corridorName: corridor.name
                            },
                            geometry: {
                                type: 'Point',
                                coordinates: [corridor.endLongitude, corridor.endLatitude]
                            }
                        }
                    );
                });

                predictionMap.addSource('corridor-endpoints', {
                    type: 'geojson',
                    data: {
                        type: 'FeatureCollection',
                        features: endpointFeatures
                    }
                });

                predictionMap.addLayer({
                    id: 'corridor-endpoints',
                    type: 'circle',
                    source: 'corridor-endpoints',
                    paint: {
                        'circle-radius': 4,
                        'circle-color': '#00aa00',
                        'circle-stroke-width': 2,
                        'circle-stroke-color': '#ffffff'
                    }
                });
            }

            // Add click handlers
            addMapInteractionHandlers(predictions);

            // Fit map to bounds
            if (bounds.isEmpty() === false) {
                predictionMap.fitBounds(bounds, { padding: 50 });
            }
        }

        function addMapInteractionHandlers(predictions) {
            // Zone click handler
            if (predictionMap.getLayer('prediction-zones-circles')) {
                predictionMap.on('click', 'prediction-zones-circles', (e) => {
                    const properties = e.features[0].properties;
                    
                    new mapboxgl.Popup()
                        .setLngLat(e.lngLat)
                        .setHTML(`
                            <div class="p-2">
                                <h6>${properties.locationName}</h6>
                                <p class="mb-1"><strong>Probability:</strong> ${Math.round(properties.probability * 100)}%</p>
                                <p class="mb-1"><strong>Time Segment:</strong> ${properties.timeSegment}</p>
                                <p class="mb-1"><strong>Sightings:</strong> ${properties.sightingCount}</p>
                                ${properties.featureType ? `<p class="mb-1"><strong>Feature Type:</strong> ${properties.featureType}</p>` : ''}
                                ${properties.featureWeight ? `<p class="mb-1"><strong>Feature Weight:</strong> ${properties.featureWeight.toFixed(2)}</p>` : ''}
                                ${properties.isCorridorPrediction === 'true' ? '<span class="badge bg-info">Corridor Prediction</span>' : '<span class="badge bg-success">Historical Sighting</span>'}
                            </div>
                        `)
                        .addTo(predictionMap);
                });

                predictionMap.on('mouseenter', 'prediction-zones-circles', () => {
                    predictionMap.getCanvas().style.cursor = 'pointer';
                });

                predictionMap.on('mouseleave', 'prediction-zones-circles', () => {
                    predictionMap.getCanvas().style.cursor = '';
                });
            }

            // Corridor click handler
            if (predictionMap.getLayer('movement-corridors-lines')) {
                predictionMap.on('click', 'movement-corridors-lines', (e) => {
                    const properties = e.features[0].properties;
                    
                    new mapboxgl.Popup()
                        .setLngLat(e.lngLat)
                        .setHTML(`
                            <div class="p-2">
                                <h6>Movement Corridor</h6>
                                <p class="mb-1"><strong>Route:</strong> ${properties.name}</p>
                                <p class="mb-1"><strong>Transitions:</strong> ${properties.transitionCount}</p>
                                <p class="mb-1"><strong>Score:</strong> ${properties.corridorScore.toFixed(1)}</p>
                                <p class="mb-1"><strong>Distance:</strong> ${Math.round(properties.distance)}m</p>
                                <p class="mb-1"><strong>Active Times:</strong> ${properties.timeOfDayPattern}</p>
                                <span class="badge bg-success">Movement Corridor</span>
                            </div>
                        `)
                        .addTo(predictionMap);
                });

                predictionMap.on('mouseenter', 'movement-corridors-lines', () => {
                    predictionMap.getCanvas().style.cursor = 'pointer';
                });

                predictionMap.on('mouseleave', 'movement-corridors-lines', () => {
                    predictionMap.getCanvas().style.cursor = '';
                });
            }
        }

        function clearMapLayers() {
            if (!predictionMap) return;

            // Remove existing layers and sources
            const layersToRemove = [
                'prediction-zones-circles', 'prediction-zones-labels',
                'movement-corridors-lines', 'corridor-endpoints'
            ];
            
            const sourcesToRemove = [
                'prediction-zones', 'movement-corridors', 'corridor-endpoints'
            ];

            layersToRemove.forEach(layerId => {
                if (predictionMap.getLayer(layerId)) {
                    try {
                        predictionMap.removeLayer(layerId);
                    } catch (e) {
                        console.warn('Error removing layer:', layerId, e);
                    }
                }
            });

            sourcesToRemove.forEach(sourceId => {
                if (predictionMap.getSource(sourceId)) {
                    try {
                        predictionMap.removeSource(sourceId);
                    } catch (e) {
                        console.warn('Error removing source:', sourceId, e);
                    }
                }
            });
        }

        function displayResultsSummary(predictions) {
            const summary = $('#results-summary');
            
            // Check for limited data warning
            let warningHtml = '';
            if (predictions.isLimitedData && predictions.limitedDataMessage) {
                warningHtml = `
                    <div class="alert alert-warning mb-3">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        ${predictions.limitedDataMessage}
                    </div>
                `;
            }
            
            summary.html(`
                ${warningHtml}
                <div class="row g-3">
                    <div class="col-4">
                        <div class="text-center">
                            <div class="h4 text-primary mb-1">${predictions.totalSightings}</div>
                            <small class="text-muted">Total Sightings</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="text-center">
                            <div class="h4 text-success mb-1">${predictions.totalTransitions}</div>
                            <small class="text-muted">Movement Transitions</small>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="text-center">
                            <div class="h4 text-info mb-1">${predictions.timeSegments.filter(t => t.sightingCount > 0).length}</div>
                            <small class="text-muted">Active Periods</small>
                        </div>
                    </div>
                </div>
                <div class="mt-3">
                    <small class="text-muted">
                        <i class="fas fa-clock me-1"></i>
                        Generated ${new Date(predictions.predictionDate).toLocaleString()}
                    </small>
                </div>
            `);
        }

        function createTimeSegmentTabs(timeSegments) {
            const tabsContainer = $('#time-segment-tabs');
            tabsContainer.empty();

            timeSegments.forEach((segment, index) => {
                const isActive = index === 0 ? 'active' : '';
                const badgeClass = segment.sightingCount > 0 ? 'bg-success' : 'bg-secondary';
                
                const tab = $(`
                    <li class="nav-item" role="presentation">
                        <button class="nav-link ${isActive}" id="tab-${index}" data-bs-toggle="pill" data-bs-target="#content-${index}" type="button" role="tab">
                            ${segment.timeSegment}
                            <span class="badge ${badgeClass} ms-2">${segment.sightingCount}</span>
                        </button>
                    </li>
                `);
                
                tabsContainer.append(tab);
            });

            // Create tab content
            const contentContainer = $('#prediction-tabs-content');
            contentContainer.empty();

            timeSegments.forEach((segment, index) => {
                const isActive = index === 0 ? 'show active' : '';
                
                const content = $(`
                    <div class="tab-pane fade ${isActive}" id="content-${index}" role="tabpanel">
                        ${createTimeSegmentContent(segment)}
                    </div>
                `);
                
                contentContainer.append(content);
            });
        }

        function createTimeSegmentContent(segment) {
            if (segment.sightingCount === 0 && (!segment.timeSegmentCorridors || segment.timeSegmentCorridors.length === 0)) {
                return `
                    <div class="p-4 text-center text-muted">
                        <i class="fas fa-eye-slash fa-3x mb-3"></i>
                        <h5>No Historical Activity</h5>
                        <p>No sightings or movement corridors recorded during ${segment.timeSegment.toLowerCase()} hours (${formatTimeRange(segment.startHour, segment.endHour)}).</p>
                    </div>
                `;
            }

            const zonesList = segment.predictedZones.map(zone => `
                <div class="d-flex justify-content-between align-items-center border-bottom py-2">
                    <div>
                        <strong>${zone.locationName}</strong>
                        ${zone.isCorridorPrediction ? '<span class="badge bg-info ms-2">Corridor</span>' : ''}
                        ${zone.featureType ? `<span class="badge bg-secondary ms-1">${zone.featureType}</span>` : ''}
                        <br>
                        <small class="text-muted">${zone.sightingCount} sightings</small>
                        ${zone.featureWeight ? `<small class="text-muted ms-2">Weight: ${zone.featureWeight.toFixed(2)}</small>` : ''}
                    </div>
                    <div class="text-end">
                        <div class="h6 mb-0">${Math.round(zone.probability * 100)}%</div>
                        <small class="text-muted">probability</small>
                    </div>
                </div>
            `).join('');

            const corridorsList = segment.timeSegmentCorridors && segment.timeSegmentCorridors.length > 0 ? `
                <h6 class="mt-3">Movement Corridors</h6>
                ${segment.timeSegmentCorridors.map(corridor => `
                    <div class="d-flex justify-content-between align-items-center border-bottom py-2">
                        <div>
                            <strong>${corridor.startFeatureName} → ${corridor.endFeatureName}</strong>
                            <span class="badge bg-success ms-2">Corridor</span>
                            <br>
                            <small class="text-muted">${corridor.transitionCount} transitions, ${Math.round(corridor.distance)}m</small>
                        </div>
                        <div class="text-end">
                            <div class="h6 mb-0">${corridor.corridorScore.toFixed(1)}</div>
                            <small class="text-muted">score</small>
                        </div>
                    </div>
                `).join('')}
            ` : '';

            return `
                <div class="p-4">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body text-center">
                                    <div class="h3 text-success mb-1">${segment.confidenceScore}%</div>
                                    <small class="text-muted">Confidence Score</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body text-center">
                                    <div class="h3 text-primary mb-1">${segment.sightingCount}</div>
                                    <small class="text-muted">Historical Sightings</small>
                                </div>
                            </div>
                        </div>
                    </div>
                    <h6>Predicted Locations</h6>
                    <div class="predicted-zones">
                        ${zonesList}
                    </div>
                    ${corridorsList}
                </div>
            `;
        }

        function formatTimeRange(start, end) {
            const formatHour = (hour) => {
                if (hour === 0) return '12:00 AM';
                if (hour === 12) return '12:00 PM';
                if (hour < 12) return `${hour}:00 AM`;
                return `${hour - 12}:00 PM`;
            };

            if (start <= end) {
                return `${formatHour(start)} - ${formatHour(end)}`;
            } else {
                return `${formatHour(start)} - ${formatHour(end + 24)}`;
            }
        }

        function updatePredictionsDisplay(predictions) {
            $('#predictions-content').html(`
                <div class="h-100 d-flex flex-column">
                    <div class="text-center mb-4">
                        <h4 class="mb-3">${predictions.profileName} Movement Predictions</h4>
                        <p class="text-muted">${predictions.propertyName}</p>
                    </div>
                    <div class="alert alert-info mb-4">
                        <i class="fas fa-info-circle me-2"></i>
                        Click on the time segment tabs above to view detailed predictions for each period.
                    </div>
                    <div class="flex-grow-1">
                        <h5>Map Legend</h5>
                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex align-items-center mb-2">
                                    <div class="me-3" style="width: 20px; height: 20px; background-color: #ff4444; border-radius: 50%;"></div>
                                    <span>Historical Sighting Zones</span>
                                </div>
                                <div class="d-flex align-items-center mb-2">
                                    <div class="me-3" style="width: 20px; height: 20px; background-color: #ffa500; border-radius: 50%;"></div>
                                    <span>Movement Corridor Predictions</span>
                                </div>
                                <div class="d-flex align-items-center mb-2">
                                    <div class="me-3" style="width: 20px; height: 3px; background-color: #00aa00;"></div>
                                    <span>Movement Corridors</span>
                                </div>
                                <small class="text-muted">Circle size represents probability, line thickness represents transition frequency</small>
                            </div>
                        </div>
                    </div>
                </div>
            `);
        }

        // UI Helper Functions
        function showProfileCard() { $('#profile-card').show(); }
        function hideProfileCard() { 
            $('#profile-card').hide(); 
            hidePredictionCard();
        }
        function showPredictionCard() { $('#prediction-card').show(); }
        function hidePredictionCard() { 
            $('#prediction-card').hide(); 
            hideResultsCard();
        }
        function showResultsCard() { $('#results-card').show(); }
        function hideResultsCard() { 
            $('#results-card').hide(); 
            hideTimeSegments();
        }
        function showTimeSegments() { $('#time-segments').show(); }
        function hideTimeSegments() { $('#time-segments').hide(); }
    </script>
}