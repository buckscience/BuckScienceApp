@model BuckScience.Web.ViewModels.Properties.PropertyDetailsVm
@using BuckScience.Web.Helpers
@{
    ViewData["Title"] = $"{Model.Name} - Details";
}

@Html.AntiForgeryToken()

<div class="property-details">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="sidebar-title">@Model.Name</h2>
        <a href="/properties" class="btn btn-custom-cancel btn-sm">
            <i class="fas fa-arrow-left"></i> Back to Properties
        </a>
    </div>
    <hr class="sidebar-title-separator" />

    <div class="accordion" id="propertyDetailsAccordion">

        <!-- Cameras Section -->
        <div class="accordion-item">
            <h2 class="accordion-header d-flex justify-content-between align-items-center" id="camerasHeading">
                <button class="accordion-button flex-grow-1 fs-6 py-2" type="button" data-bs-toggle="collapse" data-bs-target="#camerasCollapse" aria-expanded="true" aria-controls="camerasCollapse">
                    <i class="fas fa-camera me-2"></i>
                    Cameras <span class="badge badge-custom-primary ms-2 fs-7">@Model.Cameras.Count</span>
                </button>
            </h2>
            <div id="camerasCollapse" class="accordion-collapse collapse show" aria-labelledby="camerasHeading" data-bs-parent="#propertyDetailsAccordion">
                <div class="accordion-body">
                    @if (Model.Cameras.Any())
                    {
                        <!-- Camera Placement History Toggle -->
                        <div class="mb-3 d-flex align-items-center justify-content-between">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="showHistoricalPlacements" checked>
                                <label class="form-check-label fs-7" for="showHistoricalPlacements">
                                    <i class="fas fa-history me-1"></i>Show Historical Camera Placements
                                </label>
                            </div>
                        </div>
                        
                        <div class="container-fluid px-0">
                            <div class="row g-3">
                                @foreach (var camera in Model.Cameras)
                                {
                                    <div class="col-12">
    <div class="card camera-card w-100" style="cursor: pointer;" onclick="navigateToCamera(@camera.Id)">
        <div class="card-body p-3">
            <!-- Title and Badge -->
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h6 class="card-title mb-0 fs-6">@camera.Name</h6>
                <span class="badge @(camera.IsActive ? "badge-custom-success" : "badge-custom-secondary") fs-7">
                    @(camera.IsActive ? "Active" : "Inactive")
                </span>
            </div>

            <!-- Camera Brand/Model -->
            <p class="card-text text-muted mb-2 fs-7">
                <span>@camera.Brand @(!string.IsNullOrEmpty(camera.Model) ? $"/ {camera.Model}" : "")</span>
            </p>

            <!-- Location -->
            <p class="card-text text-muted mb-2 fs-7">
                <i class="fas fa-map-marker-alt me-1"></i>
                @camera.Latitude.ToString("F4"), @camera.Longitude.ToString("F4")
            </p>

            <!-- Direction -->
            <p class="card-text text-muted mb-2 fs-7">
                <i class="fas fa-compass me-1"></i>
                @{
                    var compassDirection = DirectionHelper.FromFloat(camera.DirectionDegrees);
                    var compassText = DirectionHelper.GetDisplayName(compassDirection);
                }
                @camera.DirectionDegrees.ToString("F0")Â° (@compassText)
            </p>

            <!-- Buttons -->
            <div class="btn-group w-100 mt-2" role="group">
                <button type="button" class="btn btn-outline-primary btn-sm fs-7" onclick="event.stopPropagation(); panToCameraLocation(@camera.Longitude, @camera.Latitude)" title="Focus on map">
                    <i class="fas fa-eye"></i>
                </button>
                <button type="button" class="btn btn-outline-primary btn-sm fs-7" onclick="event.stopPropagation(); navigateToCamera(@camera.Id)" title="View details">
                    <i class="fas fa-circle-info"></i>
                </button>
                <a href="/properties/@Model.Id/cameras/@camera.Id/edit" class="btn btn-outline-secondary btn-sm fs-7 d-flex align-items-center justify-content-center" title="Edit camera" onclick="event.stopPropagation();">
                    <i class="fas fa-edit"></i>
                </a>
                <a href="/properties/@Model.Id/cameras/@camera.Id/delete" class="btn btn-outline-danger btn-sm fs-7 d-flex align-items-center justify-content-center" title="Delete camera" onclick="event.stopPropagation();">
                    <i class="fas fa-trash"></i>
                </a>
                <a href="/properties/@Model.Id/photos?&cameras=@camera.Id" class="btn btn-outline-secondary btn-sm fs-7 d-flex align-items-center justify-content-center" title="View photos" onclick="event.stopPropagation();">
                    <i class="fas fa-images"></i>
                </a>
            </div>
        </div>
    </div>
</div>

                                }
                            </div>
                        </div>
                        <a href="/properties/@Model.Id/cameras/add" class="btn btn-custom-primary btn-sm mt-2 fs-7" style="min-width:unset; padding:0.25rem 0.75rem;">
                            <i class="fas fa-plus me-1"></i> Add Camera
                        </a>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-camera fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No cameras configured for this property yet.</p>
                            <a href="/properties/@Model.Id/cameras/add" class="btn btn-custom-primary">Add Camera</a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Profiles Section -->
        <div class="accordion-item">
            <h2 class="accordion-header d-flex justify-content-between align-items-center" id="profilesHeading">
                <button class="accordion-button collapsed flex-grow-1 fs-6 py-2" type="button" data-bs-toggle="collapse" data-bs-target="#profilesCollapse" aria-expanded="false" aria-controls="profilesCollapse">
                    <i class="fas fa-crosshairs me-2"></i>
                    Profiles <span class="badge badge-custom-primary ms-2 fs-7">@Model.Profiles.Count</span>
                </button>
            </h2>
            <div id="profilesCollapse" class="accordion-collapse collapse" aria-labelledby="profilesHeading" data-bs-parent="#propertyDetailsAccordion">
                <div class="accordion-body">
                    @if (Model.Profiles.Any())
                    {
                        <div class="row g-2">
                            @foreach (var profile in Model.Profiles)
                            {
                                <div class="col-12">
                                    <a href="/profiles/@profile.Id" class="card profile-card d-flex flex-column" style="cursor:pointer;">
                                        <div class="position-relative">
                                            <img src="@profile.CoverPhotoUrl" class="card-img-top" alt="Cover photo for @profile.Name" style="object-fit: cover; height: 120px;">
                                            <div class="position-absolute top-0 end-0 m-1">
                                                <span class="badge @GetProfileStatusBadgeClass(profile.ProfileStatus) fs-7">
                                                    @profile.ProfileStatus
                                                </span>
                                            </div>
                                        </div>
                                        <div class="card-body text-center mt-auto p-2">
                                            <h6 class="card-title mb-0 fs-6">@profile.Name</h6>
                                        </div>
                                    </a>
                                </div>
                            }
                        </div>
                        <a href="/properties/@Model.Id/profiles/create" class="btn btn-custom-primary btn-sm mt-2 fs-7" onclick="event.stopPropagation();">
                            <i class="fas fa-plus me-1"></i> Add Profile
                        </a>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-crosshairs fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No profiles for this property yet.</p>
                            <a href="/properties/@Model.Id/profiles/create" class="btn btn-custom-primary">Add Profile</a>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Features Section -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="featuresHeading">
                <button class="accordion-button collapsed fs-6 py-2" type="button" data-bs-toggle="collapse" data-bs-target="#featuresCollapse" aria-expanded="false" aria-controls="featuresCollapse">
                    <i class="fas fa-map-marked-alt me-2"></i>
                    Features <span class="badge badge-custom-primary ms-2 fs-7">@Model.Features.Count</span>
                </button>
            </h2>
            <div id="featuresCollapse" class="accordion-collapse collapse" aria-labelledby="featuresHeading" data-bs-parent="#propertyDetailsAccordion">
                <div class="accordion-body">
                    <div class="mb-3">
                        <button type="button" class="btn btn-custom-primary btn-sm fs-7" onclick="startDrawingFeature()">
                            <i class="fas fa-crosshairs me-1"></i> Add Feature
                        </button>
                        <small class="text-muted ms-2 fs-7">Use the drawing tools on the map to add property features</small>
                    </div>
                    
                    @if (Model.Features.Any())
                    {
                        <!-- Category Filter -->
                        <div class="mb-3">
                            <div class="d-flex flex-wrap gap-1 align-items-center">
                                <label class="form-label mb-0 me-2 fs-7">Filter by Category:</label>
                                <button class="btn btn-outline-secondary btn-sm feature-category-filter active fs-7" data-category="all">
                                    All (@Model.Features.Count)
                                </button>
                                @foreach (var categoryGroup in Model.Features.GroupBy(f => f.Category).OrderBy(g => g.Key))
                                {
                                    <button class="btn btn-outline-secondary btn-sm feature-category-filter fs-7" data-category="@((int)categoryGroup.Key)">
                                        @GetCategoryDisplayName(categoryGroup.Key) (@categoryGroup.Count())
                                    </button>
                                }
                            </div>
                        </div>
                        
                        <!-- Features grouped by category -->
                        @foreach (var categoryGroup in Model.Features.GroupBy(f => f.Category).OrderBy(g => g.Key))
                        {
                            var categoryId = $"featureCategory{(int)categoryGroup.Key}";
                            <div class="feature-category-group" data-category="@((int)categoryGroup.Key)">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="text-muted mb-0 flex-grow-1 fs-6">
                                        <i class="@GetCategoryIcon(categoryGroup.Key) me-1"></i>
                                        @GetCategoryDisplayName(categoryGroup.Key) 
                                        <span class="badge badge-custom-secondary ms-1 fs-7">@categoryGroup.Count()</span>
                                    </h6>
                                    <button class="btn btn-sm btn-outline-secondary fs-7" type="button" data-bs-toggle="collapse" 
                                            data-bs-target="#@categoryId" aria-expanded="true" aria-controls="@categoryId">
                                        <i class="fas fa-chevron-down"></i>
                                    </button>
                                </div>
                                <div class="collapse show" id="@categoryId">
                                    <div class="row g-2 mb-3">
                                        @foreach (var feature in categoryGroup)
                                        {
                                            <div class="col-12">
                                                <div class="card feature-card">
                                                    <div class="card-body p-3 d-flex align-items-start">
                                                        <div class="flex-grow-1">
                                                            <div class="d-flex justify-content-between align-items-start">
                                                                <div class="flex-grow-1">
                                                                    <h6 class="card-title mb-1 fs-6">@feature.Name</h6>
                                                                    <small class="text-muted fs-7">@feature.TypeName</small>
                                                                    @if (!string.IsNullOrEmpty(feature.Notes))
                                                                    {
                                                                        <p class="card-text text-muted mb-1 mt-1 fs-7">@feature.Notes</p>
                                                                    }
                                                                    @if (feature.CreatedAt.HasValue)
                                                                    {
                                                                        <small class="text-muted d-block fs-7">Added @feature.CreatedAt.Value.ToString("MMM d, yyyy")</small>
                                                                    }
                                                                </div>
                                                                <div class="btn-group" role="group">
                                                                    <button type="button" class="btn btn-outline-primary btn-sm fs-7" onclick="focusPropertyFeature(@feature.Id)" title="Focus on map">
                                                                        <i class="fas fa-eye"></i>
                                                                    </button>
                                                                    <button type="button" class="btn btn-outline-secondary btn-sm fs-7" onclick="editFeature(@feature.Id)">
                                                                        <i class="fas fa-edit"></i>
                                                                    </button>
                                                                    <button type="button" class="btn btn-outline-danger btn-sm fs-7" onclick="deleteFeature(@feature.Id)">
                                                                        <i class="fas fa-trash"></i>
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-map-marked-alt fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No features for this property yet.</p>
                            <p class="text-muted small">Use the drawing tools on the map to add features like bedding areas, travel corridors, water sources, etc.</p>
                        </div>
                    }
                </div>
            </div>
        </div>

    </div>
</div>

@functions {
    private string GetProfileStatusBadgeClass(BuckScience.Domain.Enums.ProfileStatus status)
    {
        return status switch
        {
            BuckScience.Domain.Enums.ProfileStatus.Watching => "badge-custom-info",
            BuckScience.Domain.Enums.ProfileStatus.HitList => "badge-custom-warning",
            BuckScience.Domain.Enums.ProfileStatus.Harvested => "badge-custom-success",
            _ => "badge-custom-secondary"
        };
    }

    private string GetCategoryDisplayName(BuckScience.Domain.Enums.FeatureCategory category)
    {
        return category switch
        {
            BuckScience.Domain.Enums.FeatureCategory.Topographical => "Topographical",
            BuckScience.Domain.Enums.FeatureCategory.ResourceFood => "Food Resources",
            BuckScience.Domain.Enums.FeatureCategory.ResourceWater => "Water Resources",
            BuckScience.Domain.Enums.FeatureCategory.ResourceBedding => "Bedding & Cover",
            BuckScience.Domain.Enums.FeatureCategory.Other => "Other",
            _ => category.ToString()
        };
    }

    private string GetCategoryIcon(BuckScience.Domain.Enums.FeatureCategory category)
    {
        return category switch
        {
            BuckScience.Domain.Enums.FeatureCategory.Topographical => "fas fa-xl fa-route",
            BuckScience.Domain.Enums.FeatureCategory.ResourceFood => "fas fa-xl fa-wheat-awn",
            BuckScience.Domain.Enums.FeatureCategory.ResourceWater => "fas fa-xl fa-water",
            BuckScience.Domain.Enums.FeatureCategory.ResourceBedding => "fas fa-xl fa-tree",
            BuckScience.Domain.Enums.FeatureCategory.Other => "fas fa-xl fa-circle-question",
            _ => "fas fa-circle-question"
        };
    }
}

@section Styles {
    <style>
        /* Custom font sizes for compact layout */
        .fs-7 {
            font-size: 0.75rem !important;
        }
        
        .fs-6 {
            font-size: 0.875rem !important;
        }
        
        .camera-card,
        .profile-card,
        .feature-card {
            height: 100%;
            transition: all 0.15s ease;
        }
        
        .camera-card:hover,
        .profile-card:hover,
        .feature-card:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        /* Optimize accordion body padding */
        .accordion-body {
            padding: 1rem 1.25rem;
        }
        
        /* Optimize card spacing */
        .card-body {
            padding: 0.75rem;
        }
        
        /* Fix: Remove padding for single-column camera cards */
        .property-details .row > .col-12 {
            padding-left: 0;
            padding-right: 0;
        }
        
        /* Better responsive card sizing for sidebar */
        @@media (min-width: 576px) {
            .col-sm-6 {
                min-width: 180px; /* Optimal for 400px sidebar */
            }
        }
        
        /* Tighter spacing for sidebar layout */
        .property-details .row {
            margin: 0 -0.5rem;
        }
        
        .property-details .row > * {
            padding: 0 0.5rem;
        }

        /* Feature category collapse styling */
        .feature-category-group .collapse {
            transition: all 0.3s ease;
        }

        .feature-category-group button[data-bs-toggle="collapse"] {
            border: none;
            background: transparent;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
        }

        .feature-category-group button[data-bs-toggle="collapse"]:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .feature-category-group button[data-bs-toggle="collapse"] i {
            transition: transform 0.2s ease;
        }
        
        /* Compact button styling */
        .btn-sm.fs-7 {
            padding: 0.2rem 0.5rem;
            font-size: 0.7rem;
        }
        
        /* Optimize badge sizing */
        .badge.fs-7 {
            font-size: 0.65rem !important;
            padding: 0.2em 0.4em;
        }
    </style>
}

@section Scripts {
    <script>
        function navigateToCamera(cameraId) {
            // Use AJAX navigation to preserve map state
            const url = `/cameras/${cameraId}/details`;
            
            fetch(url, {
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
            .then(response => {
                if (!response.ok) throw new Error(`Failed: ${response.status}`);
                return response.text();
            })
            .then(html => {
                document.getElementById('sidebar-content').innerHTML = html;
                document.dispatchEvent(new CustomEvent('sidebar:loaded', { detail: { url } }));
                history.pushState({ url }, '', url);
            })
            .catch(error => {
                console.error('Navigation error:', error);
                // Fallback to standard navigation
                window.location.href = url;
            });
        }

        function navigateToProfile(profileId) {
            // Use standard MVC navigation
            window.location.href = `/profiles/${profileId}`;
        }

        function startDrawingFeature() {
            console.log('Start drawing feature');
            
            // Check if we have the drawing control available
            if (window.App && window.App._draw) {
                // Change to polygon drawing mode by default
                window.App._draw.changeMode('draw_polygon');
                
                // Show instructions
                const instructionDiv = document.createElement('div');
                instructionDiv.id = 'drawing-instructions';
                instructionDiv.className = 'alert alert-info position-fixed';
                instructionDiv.style.cssText = 'top: 10px; right: 60px; z-index: 1000; max-width: 300px;';
                instructionDiv.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <strong>Drawing Mode Active</strong><br>
                            <small>Click points to draw a polygon. Double-click to finish. You can also use the line or point tools in the map toolbar.</small>
                        </div>
                        <button type="button" class="btn-close btn-close-sm" onclick="cancelDrawing()"></button>
                    </div>
                `;
                document.body.appendChild(instructionDiv);
            } else {
                if (window.App && window.App.showModal) {
                    window.App.showModal('Error', 'Drawing tools not available. Please refresh the page and try again.', 'error');
                } else {
                    alert('Drawing tools not available. Please refresh the page and try again.');
                }
            }
        }

        function focusPropertyFeature(featureId) {
            if (window.App && window.App.focusPropertyFeature) {
                window.App.focusPropertyFeature(featureId);
            } else {
                console.log('Focus feature function not available:', featureId);
            }
        }

        function editFeature(featureId) {
            if (window.App && window.App.editPropertyFeature) {
                window.App.editPropertyFeature(featureId);
            } else {
                console.log('Edit feature:', featureId);
            }
        }

        function deleteFeature(featureId) {
            if (window.App && window.App.deletePropertyFeature) {
                window.App.deletePropertyFeature(featureId);
            } else {
                console.log('Delete feature:', featureId);
            }
        }

        // Initialize property features when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Set property coordinates for global access
            window.App.propertyCoords = {
                lat: @Model.Latitude,
                lng: @Model.Longitude
            };
            
            if (window.App && window.App.initializePropertyFeatures) {
                window.App.initializePropertyFeatures(@Model.Id);
            }
            
            // Trigger map layer update for this property
            if (window.App && window.App.triggerMapLayerUpdate) {
                window.App.triggerMapLayerUpdate({ propertyId: @Model.Id });
            }

            // Initialize camera placement history toggle
            initializeCameraPlacementHistoryToggle();
        });

        // Function to initialize camera placement history toggle functionality
        function initializeCameraPlacementHistoryToggle() {
            const toggle = document.getElementById('showHistoricalPlacements');
            if (!toggle) return;

            // Set initial state
            window.App._showHistoricalPlacements = toggle.checked;

            // Handle toggle changes
            toggle.addEventListener('change', function() {
                const showHistorical = this.checked;
                window.App._showHistoricalPlacements = showHistorical;
                
                console.log('Camera placement history toggle changed:', showHistorical);
                
                // Reload camera markers with new setting
                if (window.App && window.App._currentPropertyId) {
                    // Force reload by resetting the flag and calling displayCamerasOnMap
                    window.App._displayingCameras = false;
                    
                    // Trigger map layer update which will call displayCamerasOnMap
                    if (window.App.triggerMapLayerUpdate) {
                        window.App.triggerMapLayerUpdate({ propertyId: window.App._currentPropertyId });
                    }
                }
            });
        }

        function cancelDrawing() {
            // Remove instructions
            const instructionDiv = document.getElementById('drawing-instructions');
            if (instructionDiv) {
                instructionDiv.remove();
            }
            
            // Return to simple select mode
            if (window.App && window.App._draw) {
                window.App._draw.changeMode('simple_select');
            }
        }

        // Make functions available globally for onclick handlers
        window.startDrawingFeature = startDrawingFeature;
        window.cancelDrawing = cancelDrawing;
        window.focusPropertyFeature = focusPropertyFeature;
        window.editFeature = editFeature;
        window.deleteFeature = deleteFeature;
        window.panToCameraLocation = function(lng, lat) {
            if (window.App && window.App.panToCameraLocation) {
                window.App.panToCameraLocation(lng, lat);
            } else {
                console.log('Pan to camera location:', lng, lat);
            }
        };

        // Feature category filtering
        document.addEventListener('DOMContentLoaded', function() {
            const filterButtons = document.querySelectorAll('.feature-category-filter');
            const categoryGroups = document.querySelectorAll('.feature-category-group');

            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const targetCategory = this.getAttribute('data-category');
                    
                    // Update active button
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Show/hide category groups
                    if (targetCategory === 'all') {
                        categoryGroups.forEach(group => group.style.display = 'block');
                    } else {
                        categoryGroups.forEach(group => {
                            const groupCategory = group.getAttribute('data-category');
                            group.style.display = groupCategory === targetCategory ? 'block' : 'none';
                        });
                    }
                });
            });

            // Handle collapse button icon rotation
            document.querySelectorAll('[data-bs-toggle="collapse"]').forEach(button => {
                button.addEventListener('click', function() {
                    const icon = this.querySelector('i');
                    if (icon) {
                        // Toggle rotation class after a small delay to let Bootstrap process the collapse
                        setTimeout(() => {
                            const target = document.querySelector(this.getAttribute('data-bs-target'));
                            if (target) {
                                if (target.classList.contains('show')) {
                                    icon.classList.remove('fa-chevron-down');
                                    icon.classList.add('fa-chevron-up');
                                } else {
                                    icon.classList.remove('fa-chevron-up');
                                    icon.classList.add('fa-chevron-down');
                                }
                            }
                        }, 200);
                    }
                });
            });
        });
    </script>
}