@model BuckScience.Web.ViewModels.Properties.PropertyDetailsVm
@{
    ViewData["Title"] = $"{Model.Name} - Details";
}

<div class="property-details">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="sidebar-title">@Model.Name</h2>
        <a href="/properties" class="btn btn-custom-cancel btn-sm">
            <i class="fas fa-arrow-left"></i> Back to Properties
        </a>
    </div>
    <hr class="sidebar-title-separator" />

    <div class="accordion" id="propertyDetailsAccordion">
        
        <!-- Cameras Section -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="camerasHeading">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#camerasCollapse" aria-expanded="true" aria-controls="camerasCollapse">
                    <i class="fas fa-camera me-2"></i>
                    Cameras <span class="badge badge-custom-primary ms-2">@Model.Cameras.Count</span>
                </button>
            </h2>
            <div id="camerasCollapse" class="accordion-collapse collapse show" aria-labelledby="camerasHeading" data-bs-parent="#propertyDetailsAccordion">
                <div class="accordion-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span class="text-muted">Manage cameras for this property</span>
                        <a href="/properties/@Model.Id/cameras/add" class="btn btn-custom-primary btn-sm">
                            <i class="fas fa-plus me-1"></i> Add Camera
                        </a>
                    </div>
                    @if (Model.Cameras.Any())
                    {
                        <div class="row g-3">
                            @foreach (var camera in Model.Cameras)
                            {
                                <div class="@(Model.Cameras.Count == 1 ? "col-8 mx-auto" : "col-6")">
                                    <div class="card h-100 camera-card" style="cursor: pointer; min-height: 140px;" onclick="navigateToCamera(@camera.Id)">
                                        <div class="card-body d-flex flex-column">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h6 class="card-title mb-0">@camera.Name</h6>
                                                <span class="badge @(camera.IsActive ? "badge-custom-success" : "badge-custom-secondary")">
                                                    @(camera.IsActive ? "Active" : "Inactive")
                                                </span>
                                            </div>
                                            <div class="flex-grow-1">
                                                <p class="card-text text-muted mb-2">
                                                    @camera.Brand @(!string.IsNullOrEmpty(camera.Model) ? $"/ {camera.Model}" : "")
                                                </p>
                                                <p class="card-text text-muted small mb-2">
                                                    <i class="fas fa-map-marker-alt me-1"></i>
                                                    @camera.Latitude.ToString("F4"), @camera.Longitude.ToString("F4")
                                                </p>
                                            </div>
                                            <div class="mt-auto">
                                                <p class="card-text small mb-0">
                                                    <i class="fas fa-images me-1 text-custom-primary"></i>
                                                    <strong>@camera.PhotoCount</strong> photos
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-camera fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No cameras configured for this property yet.</p>
                            <a href="/properties/@Model.Id/cameras/add" class="btn btn-custom-primary">Add Camera</a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Profiles Section -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="profilesHeading">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#profilesCollapse" aria-expanded="false" aria-controls="profilesCollapse">
                    <i class="fas fa-crosshairs me-2"></i>
                    Profiles <span class="badge badge-custom-primary ms-2">@Model.Profiles.Count</span>
                </button>
            </h2>
            <div id="profilesCollapse" class="accordion-collapse collapse" aria-labelledby="profilesHeading" data-bs-parent="#propertyDetailsAccordion">
                <div class="accordion-body">
                    @if (Model.Profiles.Any())
                    {
                        <div class="row g-3">
                            @foreach (var profile in Model.Profiles)
                            {
                                <div class="col-md-6">
                                    <div class="card h-100 profile-card" style="cursor: pointer;" onclick="navigateToProfile(@profile.Id)">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div>
                                                    <h6 class="card-title">@profile.Name</h6>
                                                    <p class="card-text text-muted mb-1">
                                                        <i class="fas fa-tag me-1"></i>
                                                        @profile.TagName
                                                    </p>
                                                </div>
                                                <div class="text-end">
                                                    <span class="badge @GetProfileStatusBadgeClass(profile.ProfileStatus)">
                                                        @profile.ProfileStatus
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-user-circle fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No profiles configured for this property yet.</p>
                            <a href="#" class="btn btn-custom-primary">Add Profile</a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Features Section -->
        <div class="accordion-item">
            <h2 class="accordion-header" id="featuresHeading">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#featuresCollapse" aria-expanded="false" aria-controls="featuresCollapse">
                    <i class="fas fa-map-marked-alt me-2"></i>
                    Features <span class="badge badge-custom-primary ms-2">@Model.Features.Count</span>
                </button>
            </h2>
            <div id="featuresCollapse" class="accordion-collapse collapse" aria-labelledby="featuresHeading" data-bs-parent="#propertyDetailsAccordion">
                <div class="accordion-body" style="max-width: 1200px;">
                    <div class="row g-3">
                        @foreach (var feature in Model.Features)
                        {
                            <div class="col-md-6 col-lg-4 col-xl-3">
                                <div class="card h-100 feature-card" style="cursor: pointer; max-width: 280px;" onclick="navigateToFeature('@feature.Type')">
                                    <div class="card-body">
                                        <div class="d-flex align-items-start">
                                            <div class="feature-icon me-3">
                                                <i class="@feature.Icon fa-2x text-custom-primary"></i>
                                            </div>
                                            <div>
                                                <h6 class="card-title">@feature.Name</h6>
                                                <p class="card-text text-muted small">@feature.Description</p>
                                                <span class="badge badge-custom-light">Coming Soon</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetProfileStatusBadgeClass(BuckScience.Domain.Enums.ProfileStatus status)
    {
        return status switch
        {
            BuckScience.Domain.Enums.ProfileStatus.Watching => "badge-custom-info",
            BuckScience.Domain.Enums.ProfileStatus.HitList => "badge-custom-warning",
            BuckScience.Domain.Enums.ProfileStatus.Harvested => "badge-custom-success",
            _ => "badge-custom-secondary"
        };
    }
}

@section Scripts {
    <script>
        function navigateToCamera(cameraId) {
            // Placeholder for camera navigation
            console.log('Navigate to camera:', cameraId);
        }

        function navigateToProfile(profileId) {
            // Placeholder for profile navigation
            console.log('Navigate to profile:', profileId);
        }

        function navigateToFeature(featureType) {
            // Placeholder for feature navigation
            console.log('Navigate to feature:', featureType);
        }

        // Add camera markers to the map
        document.addEventListener('DOMContentLoaded', function() {
            // Wait for map to be initialized
            setTimeout(function() {
                if (typeof App !== 'undefined' && App.getMap) {
                    const map = App.getMap();
                    if (map) {
                        addCameraMarkers(map);
                    }
                }
            }, 1000); // Give the map time to initialize
        });

        function addCameraMarkers(map) {
            // Camera data from the server
            const cameras = @Html.Raw(Json.Serialize(Model.Cameras.Select(c => new { 
                id = c.Id, 
                name = c.Name, 
                lat = c.Latitude, 
                lng = c.Longitude, 
                isActive = c.IsActive,
                brand = c.Brand,
                model = c.Model,
                photoCount = c.PhotoCount
            })));

            cameras.forEach(function(camera) {
                // Create a custom marker element
                const markerElement = document.createElement('div');
                markerElement.className = 'camera-marker';
                markerElement.style.cssText = `
                    width: 30px;
                    height: 30px;
                    background: ${camera.isActive ? '#527A52' : '#6c757d'};
                    border: 2px solid #fff;
                    border-radius: 50%;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    font-weight: bold;
                    font-size: 12px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
                `;
                markerElement.innerHTML = '<i class="fas fa-camera" style="font-size: 14px;"></i>';
                markerElement.title = `${camera.name} - ${camera.isActive ? 'Active' : 'Inactive'}`;

                // Create popup content
                const popupContent = `
                    <div style="padding: 5px;">
                        <h6 style="margin: 0 0 5px 0;">${camera.name}</h6>
                        <p style="margin: 0; font-size: 12px; color: #666;">
                            <strong>${camera.brand}</strong> ${camera.model || ''}<br>
                            ${camera.photoCount} photos<br>
                            <span style="color: ${camera.isActive ? '#527A52' : '#6c757d'};">
                                ${camera.isActive ? 'Active' : 'Inactive'}
                            </span>
                        </p>
                    </div>
                `;

                // Create marker with popup
                const marker = new mapboxgl.Marker(markerElement)
                    .setLngLat([camera.lng, camera.lat])
                    .setPopup(new mapboxgl.Popup({ offset: 25 }).setHTML(popupContent))
                    .addTo(map);

                // Add click handler to marker
                markerElement.addEventListener('click', function() {
                    navigateToCamera(camera.id);
                });
            });

            // If we have cameras, fit the map to show all of them
            if (cameras.length > 0) {
                const bounds = new mapboxgl.LngLatBounds();
                cameras.forEach(camera => {
                    bounds.extend([camera.lng, camera.lat]);
                });
                
                // Add some padding and ensure minimum zoom
                map.fitBounds(bounds, {
                    padding: 50,
                    maxZoom: 15
                });
            }
        }
    </script>
}