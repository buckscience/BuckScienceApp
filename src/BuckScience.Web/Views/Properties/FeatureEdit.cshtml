@model BuckScience.Web.ViewModels.Properties.PropertyFeatureVm
@{
    ViewData["Title"] = $"Edit {Model.Name} - Feature";
}

<div class="feature-edit" style="max-width: 350px;">
    <!-- Header with Cancel Button -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="sidebar-title">Edit Feature</h2>
        <button type="button" class="btn btn-custom-cancel btn-sm" onclick="cancelFeatureEdit()">
            <i class="fas fa-times"></i> Cancel
        </button>
    </div>
    <hr class="sidebar-title-separator mb-4" />

    <!-- Instructions Alert -->
    <div class="alert alert-success mb-4" role="alert">
        <i class="fas fa-edit me-2"></i>
        <strong>Drag</strong> to modify shape. Make changes and save.
    </div>

    <!-- Edit Form -->
    <form id="featureEditForm">
        <div class="mb-3">
            <label for="editFeatureName" class="form-label">Feature Name</label>
            <input type="text" class="form-control" id="editFeatureName" 
                   placeholder="Custom name (optional)" 
                   maxlength="100">
            <small class="text-muted">Leave blank for default type name</small>
        </div>

        <div class="mb-3">
            <label for="editFeatureType" class="form-label">Feature Type</label>
            <select class="form-select" id="editFeatureType" required>
                <!-- Options will be populated by JavaScript -->
            </select>
        </div>

        <div class="mb-3" style="display: none;">
            <label class="form-label">Geometry Type</label>
            <div class="p-2 border rounded bg-light">
                <small class="text-muted" id="geometryTypeDisplay"></small>
            </div>
        </div>

        <div class="mb-4">
            <label for="editFeatureNotes" class="form-label">Notes</label>
            <textarea class="form-control" id="editFeatureNotes" rows="3" 
                      placeholder="Add notes..."></textarea>
        </div>
    </form>

    <!-- Action Buttons -->
    <div class="mt-4 d-flex gap-2">
        <button type="button" class="btn btn-outline-secondary" onclick="cancelFeatureEdit()">
            Cancel
        </button>
        <button type="button" class="btn btn-custom-primary" onclick="saveFeatureEdit(@Model.Id)">
            <i class="fas fa-save me-1"></i>Save Changes
        </button>
    </div>
</div>

@section Scripts {
    <script>
        const FEATURE_ID = @Model.Id;
        
        async function loadFeatureData() {
            try {
                console.log('Loading feature data for ID:', FEATURE_ID);
                const response = await fetch(`/features/${FEATURE_ID}`);
                
                if (!response.ok) {
                    throw new Error(`Failed to load feature data: ${response.status}`);
                }
                
                const featureData = await response.json();
                console.log('Loaded feature data from API:', featureData);
                return featureData;
            } catch (error) {
                console.error('Error loading feature data:', error);
                return null;
            }
        }

        function populateForm(featureData) {
            console.log('Populating form with feature data:', featureData);
            
            // Populate feature name - use custom name only, empty if none exists
            const nameInput = document.getElementById('editFeatureName');
            if (nameInput) {
                nameInput.value = featureData.name || '';
                console.log('Set feature name:', nameInput.value);
            } else {
                console.error('editFeatureName input not found');
            }

            // Populate feature type options and select current type
            const selectElement = document.getElementById('editFeatureType');
            if (selectElement && window.FeatureUtils) {
                selectElement.innerHTML = window.FeatureUtils.generateFeatureOptionsHtml(featureData.classificationType);
                console.log('Populated feature type options, selected:', featureData.classificationType);
            } else if (selectElement) {
                // Fallback if FeatureUtils not available
                selectElement.innerHTML = `<option value="${featureData.classificationType}" selected>Feature Type ${featureData.classificationType}</option>`;
                console.warn('FeatureUtils not available, using fallback option');
            } else {
                console.error('editFeatureType select not found');
            }

            // Populate notes
            const notesTextarea = document.getElementById('editFeatureNotes');
            if (notesTextarea) {
                notesTextarea.value = featureData.notes || '';
                console.log('Set feature notes:', notesTextarea.value);
            } else {
                console.error('editFeatureNotes textarea not found');
            }

            // Update geometry type display
            const geometryDisplay = document.getElementById('geometryTypeDisplay');
            if (geometryDisplay && featureData.geometryWkt) {
                const geometryType = featureData.geometryWkt.split('(')[0] || 'Unknown';
                geometryDisplay.textContent = geometryType;
            }
        }

        async function initializeFeatureEdit() {
            console.log('=== INITIALIZING FEATURE EDIT ===');
            
            // Focus on the feature being edited
            if (window.App && window.App.focusPropertyFeature) {
                window.App.focusPropertyFeature(FEATURE_ID);
            }

            // Load fresh feature data from API
            const featureData = await loadFeatureData();
            if (!featureData) {
                console.error('Failed to load feature data, cannot initialize form');
                return;
            }

            // Store feature data for editing
            if (window.App) {
                window.App._editingFeature = featureData;
                window.App._editingFeatureId = FEATURE_ID;
            }

            // Populate form with loaded data
            populateForm(featureData);

            // Enable geometry editing for the feature
            setTimeout(() => {
                if (typeof window.enableGeometryEditing === 'function' && featureData) {
                    window.enableGeometryEditing(featureData);
                    console.log('Enabled geometry editing');
                }
            }, 500);
            
            console.log('=== FEATURE EDIT INITIALIZATION COMPLETE ===');
        }

        // Single initialization point - wait for DOM and then initialize
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeFeatureEdit);
        } else {
            // DOM already ready
            setTimeout(initializeFeatureEdit, 100);
        }

        // Handle sidebar load events
        document.addEventListener('sidebar:loaded', function(event) {
            console.log('sidebar:loaded event received:', event.detail);
            if (event.detail && event.detail.url && event.detail.url.includes(`/features/${FEATURE_ID}/edit`)) {
                console.log('Feature edit loaded in sidebar, re-initializing...');
                setTimeout(initializeFeatureEdit, 300);
            }
        });
    </script>
}