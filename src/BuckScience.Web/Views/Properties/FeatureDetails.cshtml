@model BuckScience.Web.ViewModels.Properties.PropertyFeatureVm
@{
    ViewData["Title"] = $"{Model.Name} - Feature Details";
}

<div class="feature-details">
    <!-- Header with Back Button -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="sidebar-title">@Model.Name</h2>
        <button type="button" class="btn btn-custom-cancel btn-sm" onclick="history.back()">
            <i class="fas fa-arrow-left"></i> Back
        </button>
    </div>
    <hr class="sidebar-title-separator mb-4" />

    <!-- Feature Summary Card -->
    <div class="card mb-4 border-0 shadow-sm">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="d-flex align-items-center">
                    <i class="@Model.Icon fa-lg text-custom-primary me-2"></i>
                    <h5 class="mb-0">Feature Information</h5>
                </div>
                <span class="badge badge-custom-primary">
                    @Model.Category
                </span>
            </div>

            <div class="row g-3 mb-3">
                <div class="col-12">
                    <label class="text-muted small d-block">Feature Type</label>
                    <p class="mb-0">
                        <i class="@Model.Icon text-custom-primary me-1"></i>
                        <strong>@Model.TypeName</strong>
                    </p>
                </div>
                
                @if (!string.IsNullOrEmpty(Model.Description))
                {
                    <div class="col-12">
                        <label class="text-muted small d-block">Description</label>
                        <p class="mb-0 small">@Model.Description</p>
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(Model.Notes))
                {
                    <div class="col-12">
                        <label class="text-muted small d-block">Notes</label>
                        <div class="p-2 border rounded bg-light">
                            <small class="text-muted">@Model.Notes</small>
                        </div>
                    </div>
                }
                
                <div class="col-12">
                    <label class="text-muted small d-block">Geometry Type</label>
                    <p class="mb-0 small">
                        <i class="fas fa-shapes text-custom-primary me-1"></i>
                        @if (!string.IsNullOrEmpty(Model.GeometryWkt))
                        {
                            @if (Model.GeometryWkt.StartsWith("POINT"))
                            {
                                <span>Point</span>
                            }
                            else if (Model.GeometryWkt.StartsWith("LINESTRING"))
                            {
                                <span>Line</span>
                            }
                            else if (Model.GeometryWkt.StartsWith("POLYGON"))
                            {
                                <span>Polygon</span>
                            }
                            else
                            {
                                <span>Unknown</span>
                            }
                        }
                        else
                        {
                            <span>No geometry data</span>
                        }
                    </p>
                </div>
                
                @if (Model.CreatedAt.HasValue)
                {
                    <div class="col-12">
                        <label class="text-muted small d-block">Created</label>
                        <p class="mb-0 small">
                            <i class="fas fa-calendar text-custom-primary me-1"></i>
                            @Model.CreatedAt.Value.ToString("MMM dd, yyyy 'at' h:mm tt")
                        </p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Actions -->
    <div class="d-flex flex-column gap-2">
        <button type="button" class="btn btn-outline-primary" onclick="editPropertyFeature(@Model.Id); window.history.back();">
            <i class="fas fa-edit me-1"></i>Edit Feature
        </button>
        <button type="button" class="btn btn-outline-danger" onclick="deletePropertyFeature(@Model.Id); window.history.back();">
            <i class="fas fa-trash me-1"></i>Delete Feature
        </button>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize feature details when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // If this is loaded via sidebar, pan to feature location
            if (window.App && window.App.focusPropertyFeature) {
                window.App.focusPropertyFeature(@Model.Id);
            }
        });

        // Also handle sidebar load events
        document.addEventListener('sidebar:loaded', function(event) {
            // If this is a feature details page loaded in sidebar, focus on feature
            if (event.detail && event.detail.url && event.detail.url.includes('/features/') && event.detail.url.includes('/details')) {
                setTimeout(() => {
                    if (window.App && window.App.focusPropertyFeature) {
                        window.App.focusPropertyFeature(@Model.Id);
                    }
                }, 300);
            }
        });
    </script>
}